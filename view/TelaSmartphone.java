package view;

import java.awt.EventQueue;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;

import model.bean.Cliente;
import model.bean.Smartphone;
import model.dao.ClienteDAO;
import model.dao.SmartphoneDAO;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;


/**
 *
 * @author VictorLeuthier
 */
public class TelaSmartphone extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form TelaCadastro
     */
    public TelaSmartphone() {
		getContentPane().setBackground(Color.WHITE);
      	initComponents();
        readJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTituloSmartphone = new javax.swing.JLabel();
        txtCodigoCelular = new javax.swing.JTextField();
        txtNumeroSerie = new javax.swing.JTextField();
        txtModelo = new javax.swing.JTextField();
        txtMarca = new javax.swing.JTextField();
        txtCorCadastro = new javax.swing.JTextField();
        txtCpfCadastro = new javax.swing.JTextField();
        
        lblCodigoCelular = new javax.swing.JLabel();
        lblNumeroSerie = new javax.swing.JLabel();
        lblModelo = new javax.swing.JLabel();
        lblMarca = new javax.swing.JLabel();
        lblCor = new javax.swing.JLabel();
        lblCpfCliente = new javax.swing.JLabel();
        
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        //quando clicar no fechar - close
        addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e) {
				TelaSmartphone.this.dispose();
			}
		});
        setTitle("Smartphones");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblTituloSmartphone.setText("Smartphones");

       /* txtNumeroSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });*/

        lblCodigoCelular.setText("Codigo Celular");

        lblNumeroSerie.setText("Numero de serie");

        lblModelo.setText("Modelo");

        lblMarca.setText("Marca");
        
        lblCor.setText("Cor");
        
        lblCpfCliente.setText("Cpf cliente");

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickSalvar(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickExcluir(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickAtualizar(evt);
            }
        });
        
        JLabel lblCorCadastro = new JLabel("Cor");
        
        JLabel lblCpfCadastro = new JLabel("CPF Cliente");
        
//        txtCorCadastro = new JTextField();
//        txtCorCadastro.setColumns(10);
//        
//        txtCpfCadastro = new JTextField();
//        txtCpfCadastro.setColumns(10);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblCodigoCelular)
        						.addComponent(txtCodigoCelular, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE))
        					.addGap(28)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblNumeroSerie)
        						.addComponent(txtNumeroSerie, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)))
        				.addComponent(btnSalvar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addGap(20)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(btnExcluir, GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addComponent(txtModelo, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
        							.addGap(33)
        							.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING, false)
        								.addGroup(jPanel1Layout.createSequentialGroup()
        									.addComponent(lblMarca)
        									.addGap(121))
        								.addComponent(txtMarca))))
        					.addGap(39))
        				.addComponent(lblModelo))
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(btnAtualizar, GroupLayout.PREFERRED_SIZE, 380, GroupLayout.PREFERRED_SIZE)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblCorCadastro)
        						.addComponent(txtCorCadastro, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(lblCpfCadastro)
        						.addComponent(txtCpfCadastro, GroupLayout.PREFERRED_SIZE, 224, GroupLayout.PREFERRED_SIZE))))
        			.addGap(161))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(38)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(lblCodigoCelular)
        						.addComponent(lblNumeroSerie)
        						.addComponent(lblModelo)
        						.addComponent(lblMarca))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(txtCodigoCelular, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtNumeroSerie, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtModelo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtMarca, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(lblCorCadastro)
        						.addComponent(lblCpfCadastro))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(txtCorCadastro, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtCpfCadastro, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
        			.addGap(18)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnSalvar)
        				.addComponent(btnExcluir)
        				.addComponent(btnAtualizar))
        			.addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1.setLayout(jPanel1Layout);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Codigo celular", "Numero de serie", "Modelo", "Marca", "Cor", "CPF Cliente"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 1327, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(1147, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );
        jPanel2.setLayout(jPanel2Layout);
        GroupLayout groupLayout = new GroupLayout(getContentPane());
        groupLayout.setHorizontalGroup(
        	groupLayout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        		.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 1327, GroupLayout.PREFERRED_SIZE)
        );
        groupLayout.setVerticalGroup(
        	groupLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(groupLayout.createSequentialGroup()
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(6)
        			.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        getContentPane().setLayout(groupLayout);

        pack();
    }// </editor-fold>                                                        

    private void clickAtualizar(java.awt.event.ActionEvent evt) {                                         
    	if(jTable1.getSelectedRow() != -1){
    		Smartphone smartphone = new Smartphone();
        	SmartphoneDAO smartphoneDao = new SmartphoneDAO();
        	
        	String codigoCelular = txtCodigoCelular.getText();
        	String numSerie = (txtNumeroSerie.getText());
        	String modelo = (txtModelo.getText());
    		String marca = (txtMarca.getText());
    		String cor = (txtCorCadastro.getText());
    		String cpf = (txtCpfCadastro.getText());
        	
    		if (tamanhoOk(codigoCelular, numSerie, modelo, marca, cor)){
        		
        		if ( (numSerie.matches("^[0-9]*$")) ){
    			
        			if (buscarSmartphonePorCodigo(codigoCelular) == null){
        				JOptionPane.showMessageDialog(null,"Codigo de celular nao encontrado","Erro",JOptionPane.ERROR_MESSAGE);
    					return;
        				
    				}else{
    					smartphone.setCodCelular(codigoCelular);
    					smartphone.setNumSerie(numSerie);
    				}
    	    	
        			
        			smartphone.setMarca(marca);
        			smartphone.setModelo(modelo);
    				smartphone.setCor(cor);
    				
    					
    				if (buscarClientePorCpf(cpf) != null){
    					smartphone.setCpf(cpf);
    				}else{
    					JOptionPane.showMessageDialog(null,"CPF invalido ou nao encontrado","Erro",JOptionPane.ERROR_MESSAGE);
    					return;
    				}
    				
    				smartphoneDao.atualizar(smartphone);
    				
    				txtCodigoCelular.setText(null);
    	    		txtNumeroSerie.setText(null);
    	    		txtModelo.setText(null);			
    				txtMarca.setText(null);
    				txtCorCadastro.setText(null);
    				txtCpfCadastro.setText(null);  
    				
    				readJTable();
    				
        		}else{
        			JOptionPane.showMessageDialog(null,"- Numero de serie deve conter apenas numeros","Erro",JOptionPane.ERROR_MESSAGE);
        			return;
        		}
        		
    		}else{
    			JOptionPane.showMessageDialog(null,"- Codigo do celular deve conter 10 digitos\n- Numero de serie deve conter 10 digitos\n- Modelo deve conter menos de 30 caracteres"
    					+ "\n- Marca deve conter pelo menos 3 caracteres\n- Cor de conter menos de 30 caracteres","Erro",JOptionPane.ERROR_MESSAGE);
    			return;
    		}
    	}else{
    		JOptionPane.showMessageDialog(null, "Selecione um smartphone para excluir.");
    	}
    }
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                        	
    	if(jTable1.getSelectedRow() != -1){
    		txtCodigoCelular.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
    		txtNumeroSerie.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
    		txtModelo.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
    		txtMarca.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
    		txtCorCadastro.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
    		txtCpfCadastro.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());

    	}
    }       

    private void clickSalvar(java.awt.event.ActionEvent evt) {                                         
    	Smartphone smartphone = new Smartphone();
    	SmartphoneDAO smartphoneDao = new SmartphoneDAO();
    	
    	String codigoCelular = (txtCodigoCelular.getText());
    	String numSerie = (txtNumeroSerie.getText());
    	String modelo = (txtModelo.getText());
		String marca = (txtMarca.getText());
		String cor = (txtCorCadastro.getText());
		String cpf = (txtCpfCadastro.getText());
    	
    	if (tamanhoOk(codigoCelular, numSerie, modelo, marca, cor)){
    		
    		if (  (codigoCelular.matches("^[0-9]*$")) && (numSerie.matches("^[0-9]*$"))  ){
			
    			if ( (buscarSmartphonePorCodigo(codigoCelular) == null) ){
    				smartphone.setCodCelular(codigoCelular);	
    			}else{
    				JOptionPane.showMessageDialog(null,"Codigo ja registrado","Erro",JOptionPane.ERROR_MESSAGE);
					return;
    			}
    			
				smartphone.setNumSerie(numSerie);	
				smartphone.setModelo(modelo);
				smartphone.setMarca(marca);
				smartphone.setCor(cor);
				
				if (buscarClientePorCpf(cpf) != null){
					smartphone.setCpf(cpf);
				}else{
					JOptionPane.showMessageDialog(null,"CPF invalido ou nao encontrado","Erro",JOptionPane.ERROR_MESSAGE);
					return;
				}
										
				smartphoneDao.criar(smartphone);
    		}else{
    			JOptionPane.showMessageDialog(null,"Codigo ou numero de serie invalidos","Erro",JOptionPane.ERROR_MESSAGE);
				return;
    		}
	    	
				txtCodigoCelular.setText(null);
	    		txtNumeroSerie.setText(null);
	    		txtModelo.setText(null);
	    		txtCorCadastro.setText(null);
				txtMarca.setText(null);
				txtCpfCadastro.setText(null);
			
		}else{
			JOptionPane.showMessageDialog(null,"- Codigo celular deve conter 11 digitos\n- Numero de serie deve conter 11 digitos\n- Marca deve ter pelo menos 3 caracteres\n- Modelo deve conter ate 30 caracteres"
					+ "\n- CPF deve conter 11 caracteres","Aviso",JOptionPane.ERROR_MESSAGE);
			return;
    	}
    	readJTable();
    	
    }                                        

    private void clickExcluir(java.awt.event.ActionEvent evt) {                                         
    	if(jTable1.getSelectedRow() != -1){
    		Smartphone smartphone = new Smartphone();
    		SmartphoneDAO smartphoneDao = new SmartphoneDAO();
    		
    		smartphone.setCodCelular(txtCodigoCelular.getText());
    		smartphoneDao.excluir(smartphone);    		
    		
    		txtCodigoCelular.setText(null);
    		txtNumeroSerie.setText(null);
       		txtModelo.setText(null);			
       		txtCorCadastro.setText(null);
       		txtMarca.setText(null);
			txtCpfCadastro.setText(null);
			
			readJTable();

    	}else{
    		JOptionPane.showMessageDialog(null, "Selecione um smartphone para excluir.");
    	}
    }                                        

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaSmartphone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaSmartphone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaSmartphone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaSmartphone.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaSmartphone().setVisible(true);
            }
        });
    }
    	   
    
	   
	   private boolean tamanhoOk(String codCelular, String numSerie, String modelo, String marca, String cor){		   			  
		  if (codCelular != null && numSerie != null && modelo != null && marca != null && cor != null){
			   if (       ( (codCelular.length()) == 11)
					   && ( (numSerie.length()) == 11) 
					   && ( (modelo.length())  < 30 )
					   && ( (modelo.length())  > 1 )
					   && ( (marca.length())   >= 3 )
					   && ( (cor.length())     < 30 )
					   && ( (cor.length())     > 1 ) ){
				   			return true;	
				}else{
					 return false;
				}	
		   } return false;
	   }
	   
	   private boolean existeCpf(String cpfCliente){
		  if( TelaCliente.isValidCpf(cpfCliente)){
			  return true;
		  }
		  return false;
	   }
	   
	   private Cliente buscarClientePorCpf(String cpf){
		   if (existeCpf(cpf)){
			   ClienteDAO clienteDao = new ClienteDAO();
			   return clienteDao.pesquisarPorCpf(cpf);		
		   }else{
			   return null;
		   }
	   }
	   
	   private Smartphone buscarSmartphonePorCodigo(String codigo){
		   SmartphoneDAO smartphoneDAO = new SmartphoneDAO();
		   return smartphoneDAO.pesquisarPorCodigo(codigo);
	   }
	   
	   /*private Smartphone buscarSmartphonePorNumSerie(String numSerie){
		   SmartphoneDAO smartphoneDAO = new SmartphoneDAO();
		   return smartphoneDAO.pesquisarPorNumSerie(numSerie);
	   }*/
	   
	   public void readJTable(){
	    	DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
	    	modelo.setRowCount(0);
	    	SmartphoneDAO smartphoneDao = new SmartphoneDAO();
	    	
	    	for(Smartphone s: smartphoneDao.listar()){
	    		modelo.addRow(new Object[]{
	       				s.getCodCelular(),
	    				s.getNumSerie(),
	    				s.getModelo(),
	    				s.getMarca(),
	    				s.getCor(),
	    				s.getCpf()
	    				
	    		});
	    		
	    	}
	    }
    
    
    
    

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JLabel lblTituloSmartphone;
    private javax.swing.JLabel lblCodigoCelular;
    private javax.swing.JLabel lblNumeroSerie;
    private javax.swing.JLabel lblModelo;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblCor;
    private javax.swing.JLabel lblCpfCliente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCodigoCelular;
    private javax.swing.JTextField txtNumeroSerie;
    private javax.swing.JTextField txtCorCadastro;
    private javax.swing.JTextField txtModelo;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtCpfCadastro;
    // End of variables declaration                   
    
    public void abrirTelaSmartphone() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					TelaSmartphone frame = new TelaSmartphone();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}
